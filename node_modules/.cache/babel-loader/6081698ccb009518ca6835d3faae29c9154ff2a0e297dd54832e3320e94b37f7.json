{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMemo } from \"react\";\nexport const useTelegram = () => {\n  _s();\n  const tg = window;\n  function shareLink(link) {\n    try {\n      tg.Telegram.WebApp.openTelegramLink(`https://t.me/share/url?url=${link}&text=`);\n    } catch (e) {\n      alert(e);\n    }\n  }\n  function openTelegramLink(link) {\n    try {\n      tg.Telegram.WebApp.openTelegramLink(link);\n    } catch (e) {\n      alert(e);\n    }\n  }\n  function setHeaderColor(color) {\n    tg.Telegram.WebApp.setHeaderColor(color);\n  }\n  function expand() {\n    try {\n      tg.Telegram.WebApp.ready();\n      tg.Telegram.WebApp.expand();\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  function shareToStory(url, params) {\n    try {\n      tg.Telegram.WebApp.shareToStory(url, params);\n    } catch (e) {\n      alert(e);\n    }\n  }\n  function haptic() {\n    try {\n      tg.Telegram.WebApp.HapticFeedback.impactOccurred('light');\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  const isMobileDevice = useMemo(() => {\n    return tg.Telegram.WebApp.platform === 'ios' || tg.Telegram.WebApp.platform === 'androind';\n  }, [tg.Telegram.WebApp.platform]);\n  return {\n    isMobileDevice,\n    initData: tg.Telegram.WebApp.initData,\n    theme: tg.Telegram.WebApp.colorScheme,\n    MainButton: tg.Telegram.WebApp.MainButton,\n    BackButton: tg.Telegram.WebApp.BackButton,\n    disableVerticalSwipes: tg.Telegram.WebApp.disableVerticalSwipes,\n    expand,\n    haptic,\n    shareLink,\n    setHeaderColor,\n    shareToStory,\n    openTelegramLink\n  };\n};\n_s(useTelegram, \"eunwUGHp8BAE2oegAKv7rgIQLyo=\");","map":{"version":3,"names":["useMemo","useTelegram","_s","tg","window","shareLink","link","Telegram","WebApp","openTelegramLink","e","alert","setHeaderColor","color","expand","ready","console","log","shareToStory","url","params","haptic","HapticFeedback","impactOccurred","isMobileDevice","platform","initData","theme","colorScheme","MainButton","BackButton","disableVerticalSwipes"],"sources":["/Users/dariavanova/Documents/vlad/OORT/src/shared/lib/hooks/useTelegram.ts"],"sourcesContent":["import { useMemo } from \"react\";\n\ntype TelegramWindow = {\n    Telegram: {\n        WebApp: {\n            expand: () => void\n            ready: () => void\n            openTelegramLink: (data: string) => void\n            setHeaderColor: (color: string) => void\n            shareToStory: (img: string, params?: {\n                widget_link: {\n                    url: string\n                    name: string\n                }\n            }) => void\n            HapticFeedback: {\n                impactOccurred: (v: 'light' | 'medium' | 'heavy' | 'rigid' | 'soft') => void\n            },\n            platform: string,\n            initData: Record<string, string>,\n            colorScheme: 'light' | 'dark',\n            MainButton: {\n                setText: (v: string) => void\n                onClick: (cb: () => void) => void\n                show: () => void\n                hide: () => void\n                setParams: (data: {\n                    text?: string\n                    color?: string\n                    text_color?: string\n                    is_visible?: boolean\n                    is_active?: boolean\n                }) => void\n            },\n            BackButton: {\n                show: () => void\n                hide: () => void\n                onClick: (cb: () => void) => void\n            },\n            disableVerticalSwipes: () => void\n        },\n        authData: {\n            user?: {\n                id: string\n            }\n        }\n    }\n}\n\nexport const useTelegram = () => {\n    const tg = (window as unknown as TelegramWindow)\n\n    function shareLink(link: string) {\n        try {\n            tg.Telegram.WebApp.openTelegramLink(\n                `https://t.me/share/url?url=${link}&text=`\n            )\n        } catch (e) {\n            alert(e)\n        }\n    }\n\n    function openTelegramLink(link: string) {\n        try {\n            tg.Telegram.WebApp.openTelegramLink(link)\n        } catch (e) {\n            alert(e)\n        }\n    }\n\n    function setHeaderColor(color: string) {\n        tg.Telegram.WebApp.setHeaderColor(color)\n    }\n\n    function expand() {\n        try {\n            tg.Telegram.WebApp.ready()\n            tg.Telegram.WebApp.expand()\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    function shareToStory(\n        url: string,\n        params?: {\n            widget_link: {\n                url: string\n                name: string\n            }\n        } \n    ) {\n        try {\n            tg.Telegram.WebApp.shareToStory(url, params)\n        } catch (e) {\n            alert(e)\n        }\n    }\n\n    function haptic() {\n        try {\n            tg.Telegram.WebApp.HapticFeedback.impactOccurred('light')\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    const isMobileDevice = useMemo(() => {\n        return (\n            tg.Telegram.WebApp.platform === 'ios' ||\n            tg.Telegram.WebApp.platform === 'androind'\n        )\n    }, [tg.Telegram.WebApp.platform])\n\n    return {\n        isMobileDevice,\n        initData: tg.Telegram.WebApp.initData,\n        theme: tg.Telegram.WebApp.colorScheme,\n        MainButton: tg.Telegram.WebApp.MainButton,\n        BackButton: tg.Telegram.WebApp.BackButton,\n\n        disableVerticalSwipes: tg.Telegram.WebApp.disableVerticalSwipes,\n        expand,\n        haptic,\n        shareLink,\n        setHeaderColor,\n        shareToStory,\n        openTelegramLink,\n    }\n}"],"mappings":";AAAA,SAASA,OAAO,QAAQ,OAAO;AAiD/B,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,EAAE,GAAIC,MAAoC;EAEhD,SAASC,SAASA,CAACC,IAAY,EAAE;IAC7B,IAAI;MACAH,EAAE,CAACI,QAAQ,CAACC,MAAM,CAACC,gBAAgB,CAC/B,8BAA8BH,IAAI,QACtC,CAAC;IACL,CAAC,CAAC,OAAOI,CAAC,EAAE;MACRC,KAAK,CAACD,CAAC,CAAC;IACZ;EACJ;EAEA,SAASD,gBAAgBA,CAACH,IAAY,EAAE;IACpC,IAAI;MACAH,EAAE,CAACI,QAAQ,CAACC,MAAM,CAACC,gBAAgB,CAACH,IAAI,CAAC;IAC7C,CAAC,CAAC,OAAOI,CAAC,EAAE;MACRC,KAAK,CAACD,CAAC,CAAC;IACZ;EACJ;EAEA,SAASE,cAAcA,CAACC,KAAa,EAAE;IACnCV,EAAE,CAACI,QAAQ,CAACC,MAAM,CAACI,cAAc,CAACC,KAAK,CAAC;EAC5C;EAEA,SAASC,MAAMA,CAAA,EAAG;IACd,IAAI;MACAX,EAAE,CAACI,QAAQ,CAACC,MAAM,CAACO,KAAK,CAAC,CAAC;MAC1BZ,EAAE,CAACI,QAAQ,CAACC,MAAM,CAACM,MAAM,CAAC,CAAC;IAC/B,CAAC,CAAC,OAAOJ,CAAC,EAAE;MACRM,OAAO,CAACC,GAAG,CAACP,CAAC,CAAC;IAClB;EACJ;EAEA,SAASQ,YAAYA,CACjBC,GAAW,EACXC,MAKC,EACH;IACE,IAAI;MACAjB,EAAE,CAACI,QAAQ,CAACC,MAAM,CAACU,YAAY,CAACC,GAAG,EAAEC,MAAM,CAAC;IAChD,CAAC,CAAC,OAAOV,CAAC,EAAE;MACRC,KAAK,CAACD,CAAC,CAAC;IACZ;EACJ;EAEA,SAASW,MAAMA,CAAA,EAAG;IACd,IAAI;MACAlB,EAAE,CAACI,QAAQ,CAACC,MAAM,CAACc,cAAc,CAACC,cAAc,CAAC,OAAO,CAAC;IAC7D,CAAC,CAAC,OAAOb,CAAC,EAAE;MACRM,OAAO,CAACC,GAAG,CAACP,CAAC,CAAC;IAClB;EACJ;EAEA,MAAMc,cAAc,GAAGxB,OAAO,CAAC,MAAM;IACjC,OACIG,EAAE,CAACI,QAAQ,CAACC,MAAM,CAACiB,QAAQ,KAAK,KAAK,IACrCtB,EAAE,CAACI,QAAQ,CAACC,MAAM,CAACiB,QAAQ,KAAK,UAAU;EAElD,CAAC,EAAE,CAACtB,EAAE,CAACI,QAAQ,CAACC,MAAM,CAACiB,QAAQ,CAAC,CAAC;EAEjC,OAAO;IACHD,cAAc;IACdE,QAAQ,EAAEvB,EAAE,CAACI,QAAQ,CAACC,MAAM,CAACkB,QAAQ;IACrCC,KAAK,EAAExB,EAAE,CAACI,QAAQ,CAACC,MAAM,CAACoB,WAAW;IACrCC,UAAU,EAAE1B,EAAE,CAACI,QAAQ,CAACC,MAAM,CAACqB,UAAU;IACzCC,UAAU,EAAE3B,EAAE,CAACI,QAAQ,CAACC,MAAM,CAACsB,UAAU;IAEzCC,qBAAqB,EAAE5B,EAAE,CAACI,QAAQ,CAACC,MAAM,CAACuB,qBAAqB;IAC/DjB,MAAM;IACNO,MAAM;IACNhB,SAAS;IACTO,cAAc;IACdM,YAAY;IACZT;EACJ,CAAC;AACL,CAAC;AAAAP,EAAA,CAhFYD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}